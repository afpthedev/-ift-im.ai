{"ast":null,"code":"var _jsxFileName = \"/home/user/-ift-im.ai/frontend/src/MapComponent.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useRef } from 'react';\nimport { MapContainer, TileLayer, GeoJSON } from 'react-leaflet';\nimport L from 'leaflet';\nimport 'leaflet/dist/leaflet.css'; // Import Leaflet CSS\nimport PropTypes from 'prop-types'; // Import PropTypes\nimport { useDataContext } from './DataContext'; // Import the hook\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst MapComponent = ({\n  turkeyGeoJson\n}) => {\n  _s();\n  const mapRef = useRef(null); // Use useRef to hold the map instance\n  const {\n    selectedProvince,\n    setSelectedProvince\n  } = useDataContext(); // Consume state and function from context\n\n  // GeoJSON stil fonksiyonu\n  const provinceStyle = feature => {\n    const provinceId = feature.properties.id;\n    return {\n      fillColor: selectedProvince === provinceId ? '#4CAF50' : '#3388ff',\n      weight: 2,\n      opacity: 1,\n      color: 'white',\n      dashArray: '3',\n      fillOpacity: 0.7\n    };\n  };\n\n  // GeoJSON tıklama işleyicisi\n  const onEachFeature = (feature, layer) => {\n    const provinceId = feature.properties.id;\n    const provinceName = feature.properties.name;\n    layer.on({\n      click: () => {\n        setSelectedProvince(provinceId); // Use setSelectedProvince from context\n      }\n    });\n    layer.bindTooltip(provinceName);\n  };\n\n  // Pan map to selected province when selectedProvince changes\n  useEffect(() => {\n    if (mapRef.current && selectedProvince !== null) {\n      const selectedFeature = turkeyGeoJson.features.find(feature => feature.properties.id === selectedProvince);\n      if (selectedFeature) {\n        const layer = L.geoJSON(selectedFeature);\n        mapRef.current.fitBounds(layer.getBounds());\n      }\n    }\n  }, [selectedProvince, turkeyGeoJson]); // Depend on selectedProvince and turkeyGeoJson\n\n  return /*#__PURE__*/_jsxDEV(MapContainer, {\n    center: [39.0, 35.0],\n    zoom: 6,\n    style: {\n      height: '500px',\n      width: '100%'\n    },\n    whenCreated: mapInstance => {\n      mapRef.current = mapInstance;\n    } // Get map instance\n    ,\n    children: [/*#__PURE__*/_jsxDEV(TileLayer, {\n      url: \"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\",\n      attribution: \"\\xA9 <a href=\\\"https://www.openstreetmap.org/copyright\\\">OpenStreetMap</a> contributors\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(GeoJSON, {\n      data: turkeyGeoJson,\n      style: provinceStyle,\n      onEachFeature: onEachFeature\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 54,\n    columnNumber: 5\n  }, this);\n};\n_s(MapComponent, \"vNXmCoKgFvdUG/khhOforzTgbwI=\", false, function () {\n  return [useDataContext];\n});\n_c = MapComponent;\nMapComponent.propTypes = {\n  selectedProvince: PropTypes.number,\n  // selectedProvince is now consumed from context\n  setSelectedProvince: PropTypes.func,\n  // setSelectedProvince is now consumed from context\n  turkeyGeoJson: PropTypes.object.isRequired // turkeyGeoJson is still passed as a prop\n};\nexport default MapComponent;\nvar _c;\n$RefreshReg$(_c, \"MapComponent\");","map":{"version":3,"names":["React","useEffect","useRef","MapContainer","TileLayer","GeoJSON","L","PropTypes","useDataContext","jsxDEV","_jsxDEV","MapComponent","turkeyGeoJson","_s","mapRef","selectedProvince","setSelectedProvince","provinceStyle","feature","provinceId","properties","id","fillColor","weight","opacity","color","dashArray","fillOpacity","onEachFeature","layer","provinceName","name","on","click","bindTooltip","current","selectedFeature","features","find","geoJSON","fitBounds","getBounds","center","zoom","style","height","width","whenCreated","mapInstance","children","url","attribution","fileName","_jsxFileName","lineNumber","columnNumber","data","_c","propTypes","number","func","object","isRequired","$RefreshReg$"],"sources":["/home/user/-ift-im.ai/frontend/src/MapComponent.js"],"sourcesContent":["import React, { useEffect, useRef } from 'react';\nimport { MapContainer, TileLayer, GeoJSON } from 'react-leaflet';\nimport L from 'leaflet';\nimport 'leaflet/dist/leaflet.css'; // Import Leaflet CSS\nimport PropTypes from 'prop-types'; // Import PropTypes\nimport { useDataContext } from './DataContext'; // Import the hook\n\nconst MapComponent = ({ turkeyGeoJson }) => {\n  const mapRef = useRef(null); // Use useRef to hold the map instance\n  const { selectedProvince, setSelectedProvince } = useDataContext(); // Consume state and function from context\n\n  // GeoJSON stil fonksiyonu\n  const provinceStyle = (feature) => {\n    const provinceId = feature.properties.id;\n    return {\n      fillColor: selectedProvince === provinceId ? '#4CAF50' : '#3388ff',\n      weight: 2,\n      opacity: 1,\n      color: 'white',\n      dashArray: '3',\n      fillOpacity: 0.7\n    };\n  };\n\n  // GeoJSON tıklama işleyicisi\n  const onEachFeature = (feature, layer) => {\n    const provinceId = feature.properties.id;\n    const provinceName = feature.properties.name;\n\n    layer.on({\n      click: () => {\n        setSelectedProvince(provinceId); // Use setSelectedProvince from context\n      }\n    });\n\n    layer.bindTooltip(provinceName);\n  };\n\n  // Pan map to selected province when selectedProvince changes\n  useEffect(() => {\n    if (mapRef.current && selectedProvince !== null) {\n      const selectedFeature = turkeyGeoJson.features.find(\n        feature => feature.properties.id === selectedProvince\n      );\n\n      if (selectedFeature) {\n        const layer = L.geoJSON(selectedFeature);\n        mapRef.current.fitBounds(layer.getBounds());\n      }\n    }\n  }, [selectedProvince, turkeyGeoJson]); // Depend on selectedProvince and turkeyGeoJson\n\n  return (\n    <MapContainer\n      center={[39.0, 35.0]}\n      zoom={6}\n      style={{ height: '500px', width: '100%' }}\n      whenCreated={mapInstance => { mapRef.current = mapInstance; }} // Get map instance\n    >\n      <TileLayer\n        url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\n        attribution='&copy; <a href=\"https://www.openstreetmap.org/copyright\">OpenStreetMap</a> contributors'\n      />\n      <GeoJSON\n        data={turkeyGeoJson}\n        style={provinceStyle}\n        onEachFeature={onEachFeature}\n      />\n    </MapContainer>\n  );\n};\n\nMapComponent.propTypes = {\n  selectedProvince: PropTypes.number, // selectedProvince is now consumed from context\n  setSelectedProvince: PropTypes.func, // setSelectedProvince is now consumed from context\n  turkeyGeoJson: PropTypes.object.isRequired, // turkeyGeoJson is still passed as a prop\n};\nexport default MapComponent;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}